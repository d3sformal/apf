# project config for jpf-abstraction extension
# only process this properties file if on top of the jpf-core model classes

jpf-abstraction = ${config_path}

# we need to use ';' delimiters so that NetBeans/Ant can use this as a path spec
jpf-abstraction.native_classpath=\
  ${jpf-abstraction}/build/jpf-abstraction.jar;${jpf-abstraction}/lib/antlr-4.0-complete.jar

jpf-abstraction.classpath=\
  ${jpf-abstraction}/build/jpf-abstraction-classes.jar

#jpf-abstraction.test_classpath=\
#  ${jpf-abstraction}/build/tests/gov/nasa/jpf/abstraction

### configurations specific to the symbc project

# note we have to use the "+<key>=.." prepend notation since the NetBeans/Ant
# property parser doesn't like recursion
+peer_packages = gov.nasa.jpf.abstraction;

jvm.insn_factory.class=gov.nasa.jpf.abstraction.AbstractInstructionFactory

# no state matching
# vm.storage.class=nil

report.publisher=console
report.console.class=gov.nasa.jpf.abstraction.PredicateConsolePublisher
report.console.property_violation=error,snapshot,trace

search.class=gov.nasa.jpf.abstraction.PredicateAbstractionRefinementSearch

vm.serializer.class=gov.nasa.jpf.abstraction.PredicateAbstractionSerializer
vm.storage.class=gov.nasa.jpf.abstraction.ResetableStateSet

panda.assertions_disabled=false
panda.interpolate=false
panda.counterexample.print_concrete=true
panda.counterexample.print_format=SEPARATED
panda.counterexample.print_refined_predicate_contexts=true
panda.counterexample.print_error_on_refinement_failure=false
panda.branch.reevaluate_predicates=true
panda.branch.adjust_concrete_values=true
panda.branch.prune_infeasible=false
panda.branch.force_feasible_once=true
panda.interpolation=false
panda.interpolation.global=false
# panda.log_smt=true
