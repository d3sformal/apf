# project config for jpf-abstraction extension
# only process this properties file if on top of the jpf-core model classes

jpf-abstraction = ${config_path}

# we need to use ';' delimiters so that NetBeans/Ant can use this as a path spec
jpf-abstraction.native_classpath=\
  ${jpf-abstraction}/build/jpf-abstraction.jar;${jpf-abstraction}/lib/antlr-4.0-complete.jar

jpf-abstraction.classpath=\
  ${jpf-abstraction}/build/jpf-abstraction-classes.jar

#jpf-abstraction.test_classpath=\
#  ${jpf-abstraction}/build/tests/gov/nasa/jpf/abstraction

### configurations specific to the symbc project

# note we have to use the "+<key>=.." prepend notation since the NetBeans/Ant
# property parser doesn't like recursion
+peer_packages = gov.nasa.jpf.abstraction;

jvm.insn_factory.class=gov.nasa.jpf.abstraction.AbstractInstructionFactory

# no state matching
# vm.storage.class=nil

report.publisher=console
report.console.class=gov.nasa.jpf.abstraction.PredicateConsolePublisher
report.console.property_violation=error,snapshot,trace

# mandatory Search that allows abstraction refinement
search.class=gov.nasa.jpf.abstraction.PredicateAbstractionRefinementSearch

# mandatory Serializer that accounts for abstract states
vm.serializer.class=gov.nasa.jpf.abstraction.PredicateAbstractionSerializer

# more or less mandatory choice of StateSet when using refinement
vm.storage.class=gov.nasa.jpf.abstraction.ResetableStateSet

# mandatory listener
listener=gov.nasa.jpf.abstraction.AbstractListener

# abstract domain to be used
# PREDICATES (without filename) is an empty predicate abstraction
panda.abstract_domain=PREDICATES

# enables various additional informative messages
# possible values:
#   true (enables verbose prints globally)
#   false (disables verbose prints globally)
#   list of classes (enables verbose prints for selected classes: e.g., gov.nasa.jpf.abstraction.bytecode.ArrayLoadExecutor,gov.nasa.jpf.abstraction.smt.SMT)
panda.verbose=false

# similar to `panda.verbose` but for development purposes, may enable interactive debugging features
panda.debug=false

# stores everything sent to smt solvers in files prefixed with 'smt.'
panda.log_smt=false

# choose smt
# CVC4
# MathSat
panda.smt=CVC4

# choose smt for interpolation
# SMTInterpol
# Z3
panda.smt.interpolation=Z3

# force assertions to be ENABLED (false), DISABLED (true), UNKNOWN-STATE (unknown)
panda.assertions_disabled=false

# when reporting potential error trace, print concrete trace
panda.counterexample.print_concrete=true

# when reporting spurious error trace, print the trace and interpolants either SEPARATED or INTERLEAVED
panda.counterexample.print_format=SEPARATED

# when reporting spurious error trace, print the refined sets of abstraction predicates (grouped into method contexts)
panda.counterexample.print_refined_predicate_contexts=true

# report failures of refinement
panda.counterexample.print_error_on_refinement_failure=false

# when an abstractly enabled branch is not enabled concretely, adjust concrete state to match the abstract state and continue to the branch
# incompatible with panda.branch.prune_infeasible
panda.branch.adjust_concrete_values=true

# when an abstractly enabled branch is not enabled concretely, find a concrete trace that would enable the branch, add choices of non-det values to enable exploring the trace
# requires panda.branch.prune_infeasible
panda.branch.nondet_force_feasible=true

# implies panda.branch.force_feasible, uses state matching so that forcing branches enables each branch just once (guarantees convergence: exploring just one concrete trace corresponding to the abstract trace)
panda.branch.nondet_force_feasible_once=true

# branches that are not enabled concretely are cut off
# incompatible with panda.branch.adjust_concrete_values
panda.branch.prune_infeasible=false

# force refinement of predicate valuation after branching (improved precision based on assumed branch)
panda.branch.reevaluate_predicates=true

# enables lazy abstraction-like refinement of the abstraction
# - counterexample analysis using SMT
# - interpolants
panda.refinement=false

# treats the trace formula as a one large formula, does not account for method scopes
panda.refinement.global=false

# enables interpolation procedure by M. Heizmann, J. Hoenicke, and A. Podelski. Nested Interpolants. POPL 2010
panda.refinement.nested=false

# enables our custom interpolation procedure
panda.refinement.custom=true

# adds an overapproximation of the subtrace within a method as an abstraction predicate globally (for the method)
panda.refinement.method_global=false

# true: after refinement backtracks to first refined state and recomputes only the necessary part of the state space
# false: backtracks all the way to the initial state and recomputes the entire state space (unlike lazy abstraction)
panda.refinement.keep_unrefined_prefix=true

# the same as above, but the granularity of refinements correspond to whole methods when detecting where to backtrack
panda.refinement.keep_unrefined_method_prefix=true

# true: after refinement bactracks over some state space branching points the already explored (safe) branches will be remembered and not explored after the refinement
# false: nothing is remembered and thus all is recomputed during the refined forward exploration
panda.refinement.keep_explored_branches=true

# when the lazy backtracking after refinement fails (due to not establishing values of new predicates for example) try to backtrack all the way (once) and if that fails too, then fail
panda.refinement.drop_unrefined_prefix_on_failure=true

# add trace formula clauses that capture initial values of fields/elements
panda.refinement.trace.initialize_static_fields=true
panda.refinement.trace.initialize_object_fields=true
# initialization of array elements may result in "unsupported" response from the solver
panda.refinement.trace.initialize_array_elements=true

# construct constraints as stores or reads of initial values
#
# READ: (select (select ssa_0_arr fresh_XYZ) 0) = 0    AND    (select (select ssa_0_arr fresh_XYZ) 1) = 0 ...
#
# WRITE: ssa_1_arr = (store ssa_0_arr fresh_XYZ (store (store ... (store (select ssa_0_arr fresh_XYZ) 0 0) 1 0) ... ))
#
panda.refinement.trace.initialization_encoding=READ

# enable heuristic to be used during refinement
# use gov.nasa.jpf.abstraction.heuristic.RefinementHeuristic for no heuristic
panda.refinement.heuristic=gov.nasa.jpf.abstraction.heuristic.AddEqualityRefinementHeuristic

# file to write the abstraction predicates into when the last refinement step fails
panda.refinement.dump_abstraction_predicates_to=output/last.pred

# default implementation of the state set (which is wrapped by a resetable facade)
panda.storage.class=gov.nasa.jpf.vm.JenkinsStateSet

# do not use this unless debugging Panda itself
# forces all minimizations of expressions to be checked (equivalence with the original expression) for correctness by SMT
panda.language.check_minimization=false

# check trace feasibility after each instruction and report infeasibility
panda.check_trace_feasibility_at_every_step=false

# Add predicates tracking exact values of control variables (mainly for `for` loops)
#
# for (int i = 0; i < n; ++i) {
#   ...
# }
#
# When evaluating the `i < n`, in each iteration add a predicate `i = c` (binding `i` with exact constant `c`)
# This helps differentiate loop iterations and prevent state matching.
# It is especially useful when used in pruning (to ensure traversal of a complete trace from init to the end state)
panda.branch.track_exact_value_for_loop_control_variable=false

# When UniverseMonitor listener is enabled, monitor the entire universe (heap) or just that part reachable from current local reference variables
panda.universe.monitor_whole=false

# How to encode freshness of newly allocated objects in the trace formula
# ASSIGN_REFERENCE: ref(fresh_XYZ) = XYZ
# DIFFERENCE: fresh_XYZ != o1 and fresh_XYZ != o2 ... (for all oi already on the trace)
panda.refinement.trace.freshness_encoding=ASSIGN_REFERENCE

# Accompany each predicate over an anonymous object that was obtained from interpolants with a copy that replaces the anonymous object with the destination to which it was stored
#
# Statement:
#   a = array(XYZ);
#
# Predicate:
#   alength(arrlen, array(XYZ)) = 1
#
# Result:
#   alength(arrlen, array(XYZ)) = 1
#   alength(arrlen, a) = 1
panda.refinement.extend_predicates_over_anonymous_to_destinations=false
